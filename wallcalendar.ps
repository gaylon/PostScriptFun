%!PS-Adobe-2.0
%%Title: WallCalendar -- Draws Continuous Calendar Pages
%%Creator: Gaylon R Lovelace 
%%CreationDate: 04 May 2014
%%EndComments

0.1234
(Top of file.  Print stack: \n) print flush
stack
(Done stack. \n) print flush


% Define the date-month-year for this page to begin
/currdate    17  def
/currmonth   11  def
/curryear  2015  def

% Number of weeks per page
/nrows {12} def
/ncols {7} def

% Basic units of layout.
/inch {72 mul} def
/xss {0.50 inch} def  % Left Margin
/xee {7.97 inch} def  % Right Margin 
/yss {0.30 inch} def  % Top Margin      
/yee {10.5 inch} def  % Bottom Margin     
/xunit {xee xss sub ncols div mul} def
/yunit {yee yss sub nrows div mul} def

% For this task, it's more natural to work in coords starting @ upper-left, 
% but PS starts lower-left.  Scale y-axis by -1, and translate to change 
% coordinate system.   
1 -1 scale
0 inch -11 inch translate

% Unfortunately, the coord-change results in all text being upside-down. 
% Define UpsideDownShow, for use with text items. 
/usdshow {1 -1 scale show 1 -1 scale} def

/monthnames [(January) (February) (March) (April) (May) (June) 
(July) (August) (September) (October) (November) (December)]   def 
/monthlengths [31 28 31 30 31 30 31 31 30 31 30 31] def
/febNdx 1 def


/concatstrings % (a) (b) -> (ab)  
{   
  exch dup length                   % b, a, len(a) 
  2 index length                    % b, a, len(a), len(b)
  add string                        % b, a, ab=string(len(a)+len(b))
  dup dup                           % b, a, ab, ref-ab, ref-ab 
  4 2 roll                          % b, ref-ab, ref-ab, a, ab 
  copy                              % b, ref-ab=a, ref-ab=a, ab=a 
  length                            % b, ref-ab, ref-ab, len(a) 
  4 -1 roll                         % ref-ab, ref-ab, len(a), b 
  putinterval                       % ref-ab, ref-ab, 
} bind def  


/leapadjust {
  % Decides if curryear is leapyear. Sets monthlengths[1] accordingly. 
  % Call this at program start, and at Jan 1st. 
  % if year is not divisible by 4 then common year   (Wikipedia says) 
  % else if year is not divisible by 100 then leap year
  % else if year is not divisible by 400 then common year
  % else leap year
  curryear 4 mod 0 ne  { monthlengths febNdx 28 put } 
  {
    % div by 4
    curryear 100 mod 0 ne  { monthlengths febNdx 29 put } 
    {
      % div by 4  && div by 100
      curryear 400 mod 0 ne  { monthlengths febNdx 28 put } 
      {
          % div by 4  &&  div by 100  &&  div by 400
          monthlengths febNdx 29 put 
      } ifelse
    } ifelse
  } ifelse
} def

/printMonthName { 
  % Print "MonthName YYYY" vertically in the left-margin area. 
  % Vertically center the string around the y-position 2.5 rows 
  % below the top of the box containing the first of the month. 
  % This function will be called at the start of the page 
  % (before starting to draw the upper-left-most day-box), and 
  % again at the start of each subsequent month (before starting 
  % to draw the day-box for the first of the month).  
  % The trick is that the string will often be split across pages, 
  % and we want the two parts of the string to align perfectly 
  % when the two pages are attached together. 

  % (Entering printMonthName.  Print stack: \n) print flush
  % stack
  % (Done stack. \n) print flush


  currentpoint  % save this, so can return here when done 



  currentpoint xss 0.9 mul exch moveto pop % move straight left into margin 
  currdate 1 ne 
  {
    % else: we're just starting page, at (xss, yss)
    0  % keep x-posn at xss, as-is 
    currdate 1 sub ncols div ceiling neg yunit  rmoveto
  } if

  % Center the text 2.5 rows below the beginning of the month
  0 2.5 yunit rmoveto 

  currentfont

  % Now we're at point where we want text's baseline centered. 
  % Start by creating string "MonthName YYYY"
  %monthnames currmonth get 
  monthnames currmonth 1 sub get ( ) concatstrings curryear 4 string cvs concatstrings
  % monthnames currmonth get dup   % --> ref-mName, ref-mName 
  % length dup 5 add               % --> ref-mName, len(mName), len(mName)+5
  % string exch                    % --> ref-mName, string(len(mName)+5), len(mName)
  % 3 1 roll                       % --> len(mName), ref-mName, string(len(mName)+5)
  % copy                           % --> len(mName), ref-mName, string=mName...
  %   
  %                                % --> string=mName..., len(mName), (2014) 
  % putinterval                    % --> 
  
  
  %exch 
  
  -90 rotate
  
  /Helvetica-Bold findfont 16 scalefont setfont
  dup stringwidth   pop  % discard Wy
  2 div neg 0 rmoveto

  usdshow
  
  90 rotate

  setfont


  (About to moveto and return from printMonthName.  Print stack: \n) print flush
  stack
  (Done stack. \n) print flush


  % Return to saved position
  moveto 
} def 
%        % current column # still on stack
%    exch xunit div % calc current column #, from curr x-position 
% exch 


/incrMonth {
  /currdate 1 def 

  /currmonth currmonth 1 add  def
  currmonth 12 gt { 
    /currmonth 1 def  
    /curryear curryear 1 add def 
    % % % FIXME!!!! % % %   leapadjust 
  } if

  printMonthName
} def

/incrDate {
  /currdate currdate 1 add  def
  currdate monthlengths currmonth 1 sub get gt
  { incrMonth } if
} def


/Helvetica findfont 14 scalefont setfont

/fineline {0.3 setlinewidth} def 
/fatline {2.8 setlinewidth} def 

fineline
newpath
0 0 moveto
%1 xunit 1 yunit rlineto
xss yss rmoveto

% The basic tiling block is: 
%     __________
%    |
%    |
%    |
%    |        DD
% 
% Then a line must be drawn across the page bottom, and one down 
% the right side, to close those edges.

/basicstep {
  1 xunit 0 yunit rlineto
  -1 xunit 0 yunit rmoveto
  0 xunit 1 yunit rlineto
  0.96 xunit -0.06 yunit rmoveto
  currdate 2 string cvs
  dup stringwidth 
  % Move -Wx by +Wy.  UpSideDown-ness of usdshow does equiv of negating Wy. 
  exch neg exch rmoveto
  usdshow
} def

% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 
% "Main" program execution 

1.2345
(Starting Main.  Print stack: \n) print flush
stack
(Done stack. \n) print flush

leapadjust
printMonthName

1 1 nrows {
  pop   % Discard the for-loop index.
  currentpoint
  1 1 ncols {
    pop   % Discard the for-loop index.

    % Store currentpoint, before calling basicstep, then move back, after. 
    % So basicstep can leave currentpoint just anywhere. 
    currentpoint
    basicstep
    moveto
    % Stack still has x,y of start of this week/row (from outer loop).

    incrDate
    1 xunit 0 yunit rmoveto
    %0.25 xunit 0.1 yunit rmoveto
  } for
  moveto  % "Carriage return' to start of this week/row (from outer loop).
  0 xunit 1 yunit rmoveto
} for

xss yee moveto
xee yee lineto
xee yss lineto
-2 xunit 0 rmoveto
currentpoint
stroke 

fatline
newpath
moveto 
0 nrows yunit rlineto

%stroke
%
%newpath
%fatline
%currentpoint pop yee lineto 
%fineline
stroke


9.8765
(Done Main.  Did stroke.  Print stack: \n) print flush
stack
(Done stack. \n) print flush


showpage



